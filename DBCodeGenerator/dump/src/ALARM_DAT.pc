/* *******************************************************************/
/* *   File               :    ALARM_DAT.pc
/* *   Short Description  :    ORACLE DATABASE ACCESS
/* * 		                   ALARM  DATA FOR PARMENTERS
/* *   Author             :    DB CODE Generator
/* *   Created Date       :    13.06.2013
/* *   Tech.Support       :    LiuWeiZhao. email:welljoe@hotmail.com 
/* *******************************************************************/
/* *   Copyright (c)  SGAI AI 2009   All Rights Reserved
/* *******************************************************************/

#include "LOG.h"
#include "ALARM_DAT.h"
//
// Declare ORACLE Host Variables
//

#define SQLCA_STORAGE_CLASS static
#define ORACA_STORAGE_CLASS static
EXEC SQL INCLUDE sqlca;
EXEC SQL INCLUDE oraca;

#define OPENED 1
#define CLOSED 2
EXEC SQL BEGIN DECLARE SECTION;
/* ****************************************************************************** */
/*                                                                                */
/*                               define Oracle                                    */
/*                               Host Variables                                   */
/*                                                          .                     */
/*                                                                                */
/* ****************************************************************************** */

static VARCHAR	dynstr[16000];
static long		rowCnt;       
static long		cuFl;         
//Unit[-]:alarm no (key).Limit:[-,-]
static long     ora_alarmNo;
//Unit[-]:parmenter no.Limit:[-,-]
static short    ora_parmNo;
static short    ora_parmNoZi;
//Unit[-]:alarm grade(0-L,1-M,2-H).Limit:[-,-]
static short    ora_grade;
static short    ora_gradeZi;
//Unit[-]:alarm date time.Limit:[-,-]
static VARCHAR  ora_alarmTime[15];
static short    ora_alarmTimeZi;
//Unit[-]:current value for alarm.Limit:[-,-]
static float    ora_curVal;
static short    ora_curValZi;
//Unit[-]:current postion of value.Limit:[-,-]
static long     ora_curPos;
static short    ora_curPosZi;
//Unit[-]:alarm message.Limit:[-,-]
static VARCHAR  ora_alarmMsg[257];
static short    ora_alarmMsgZi;
//Unit[-]:sp2.Limit:[-,-]
static long     ora_sp2;
static short    ora_sp2Zi;
//Unit[-]:sp3.Limit:[-,-]
static short    ora_sp3;
static short    ora_sp3Zi;
//Unit[-]:sp4.Limit:[-,-]
static short    ora_sp4;
static short    ora_sp4Zi;
//Unit[-]:sp5.Limit:[-,-]
static float    ora_sp5;
static short    ora_sp5Zi;
//Unit[-]:sp6.Limit:[-,-]
static float    ora_sp6;
static short    ora_sp6Zi;
//Unit[-]:sp7.Limit:[-,-]
static VARCHAR  ora_sp7[51];
static short    ora_sp7Zi;
//Unit[-]:create time.Limit:[-,-]
static VARCHAR  ora_toc[15];
static short    ora_tocZi;
//Unit[-]:modify time.Limit:[-,-]
static VARCHAR  ora_tom[15];
static short    ora_tomZi;
//Unit[-]:creator or modifyer.Limit:[-,-]
static VARCHAR  ora_mop[51];
static short    ora_mopZi;
// Host arguments for Primary key
static long     k_ora_alarmNo;   // Unit[-]:alarm no (key).Limit:[-,-]

EXEC SQL END DECLARE SECTION;         
             
// 				             
//C O N S T R U C T O R S    
//=======================    
//                           
ALARM_DAT::ALARM_DAT()
{
	initial();                                             
}

//					
//C O P Y  -  C O N S T R U C T O R 
//==================================
ALARM_DAT::ALARM_DAT(const ALARM_DAT &inst)
{
//----------------------------------------------------------
	this->set_alarmNo(inst.alarmNo());
//----------------------------------------------------------
	this->set_parmNo(inst.parmNo());
	this->set_parmNoZi(inst.parmNoZi());
//----------------------------------------------------------
	this->set_grade(inst.grade());
	this->set_gradeZi(inst.gradeZi());
//----------------------------------------------------------
	this->set_alarmTime(inst.alarmTime());
	this->set_alarmTimeZi(inst.alarmTimeZi());
//----------------------------------------------------------
	this->set_curVal(inst.curVal());
	this->set_curValZi(inst.curValZi());
//----------------------------------------------------------
	this->set_curPos(inst.curPos());
	this->set_curPosZi(inst.curPosZi());
//----------------------------------------------------------
	this->set_alarmMsg(inst.alarmMsg());
	this->set_alarmMsgZi(inst.alarmMsgZi());
//----------------------------------------------------------
	this->set_sp2(inst.sp2());
	this->set_sp2Zi(inst.sp2Zi());
//----------------------------------------------------------
	this->set_sp3(inst.sp3());
	this->set_sp3Zi(inst.sp3Zi());
//----------------------------------------------------------
	this->set_sp4(inst.sp4());
	this->set_sp4Zi(inst.sp4Zi());
//----------------------------------------------------------
	this->set_sp5(inst.sp5());
	this->set_sp5Zi(inst.sp5Zi());
//----------------------------------------------------------
	this->set_sp6(inst.sp6());
	this->set_sp6Zi(inst.sp6Zi());
//----------------------------------------------------------
	this->set_sp7(inst.sp7());
	this->set_sp7Zi(inst.sp7Zi());
//----------------------------------------------------------
	this->set_toc(inst.toc());
	this->set_tocZi(inst.tocZi());
//----------------------------------------------------------
	this->set_tom(inst.tom());
	this->set_tomZi(inst.tomZi());
//----------------------------------------------------------
	this->set_mop(inst.mop());
	this->set_mopZi(inst.mopZi());
}

//					
//C O N S T R U C T O R -W I T H P A R A M E T E R S
//===================================================
//					
ALARM_DAT::ALARM_DAT(long arg1)
{
	initial();					               
	setPrimKey (arg1);    
	//read DB record                           
	dbAccess = true;                           
	dbMessage = readDB();                      
	if ( dbMessage != NULL ) dbAccess = false; 
}

//D E S T R U C T O R S  
//=======================
//                       
ALARM_DAT::~ALARM_DAT()
{
}

//initialise all member variables
void ALARM_DAT::initial()
{
	set_alarmNo(0);
	set_parmNo(0);
	set_parmNoZi(-1);
	set_grade(0);
	set_gradeZi(-1);
	set_alarmTime("");
	set_alarmTimeZi(-1);
	set_curVal(0);
	set_curValZi(-1);
	set_curPos(0);
	set_curPosZi(-1);
	set_alarmMsg("");
	set_alarmMsgZi(-1);
	set_sp2(0);
	set_sp2Zi(-1);
	set_sp3(0);
	set_sp3Zi(-1);
	set_sp4(0);
	set_sp4Zi(-1);
	set_sp5(0);
	set_sp5Zi(-1);
	set_sp6(0);
	set_sp6Zi(-1);
	set_sp7("");
	set_sp7Zi(-1);
	set_toc("");
	set_tocZi(-1);
	set_tom("");
	set_tomZi(-1);
	set_mop("");
	set_mopZi(-1);
	//initialies Primary key members
	set_k_alarmNo(0);
// Initial Oracle Options
	oraca.oradbgf  = 1; // gather debug informations       
	oraca.oracchf  = 1; // gather cursor cache informations
	oraca.orahchf  = 1; // check heap                      
	oraca.orastxtf = 3; // always save last sql-statement  
	                                                       
	EXEC ORACLE OPTION (ORACA=YES);                        
	EXEC ORACLE OPTION (HOLD_CURSOR=YES);                  
	EXEC ORACLE OPTION (RELEASE_CURSOR=NO);                
	EXEC ORACLE OPTION (MAXOPENCURSORS=50);                
	pCatch = CatchDbaxError::instance();                   
	                                                       
}

//read a single entry from DB.
char* ALARM_DAT::readDB()
{
	//
	//copy the host variables (k_...) to Oracle Host Keys (k_ora_..)
	//
		copyKeyToHost();
	//
	// Do SELECT
	//
	EXEC SQL SELECT 
		alarmNo,
		parmNo,
		grade,
		TO_CHAR(alarmTime , 'YYYYMMDDHH24MISS'),
		curVal,
		curPos,
		alarmMsg,
		sp2,
		sp3,
		sp4,
		sp5,
		sp6,
		sp7,
		TO_CHAR(toc , 'YYYYMMDDHH24MISS'),
		TO_CHAR(tom , 'YYYYMMDDHH24MISS'),
		mop
	INTO
		:ora_alarmNo,
		:ora_parmNo:ora_parmNoZi,
		:ora_grade:ora_gradeZi,
		:ora_alarmTime:ora_alarmTimeZi,
		:ora_curVal:ora_curValZi,
		:ora_curPos:ora_curPosZi,
		:ora_alarmMsg:ora_alarmMsgZi,
		:ora_sp2:ora_sp2Zi,
		:ora_sp3:ora_sp3Zi,
		:ora_sp4:ora_sp4Zi,
		:ora_sp5:ora_sp5Zi,
		:ora_sp6:ora_sp6Zi,
		:ora_sp7:ora_sp7Zi,
		:ora_toc:ora_tocZi,
		:ora_tom:ora_tomZi,
		:ora_mop:ora_mopZi
	FROM ALARM_DAT
	WHERE
				alarmNo         = :k_ora_alarmNo ;
	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	//
	// copy host variables into Class attributes
	//
	copyOracleToAttribute();
	return ( NULL );
}

//updates a single entry from DB
char* ALARM_DAT::updateDB()
{
	//
	//copy the host variables (k_...) to Oracle Host Keys (k_ora_..)
	//
		copyKeyToHost();
	//copy the attributes ( ...) to Oracle Hosts( ora_..)
	//
		copyAttributeToOracle();
	//
	// Do UPDATE
	//
	EXEC SQL UPDATE ALARM_DAT
	SET 
		alarmNo             =:ora_alarmNo,
		parmNo              =:ora_parmNo:ora_parmNoZi,
		grade               =:ora_grade:ora_gradeZi,
		alarmTime           =TO_DATE( :ora_alarmTime:ora_alarmTimeZi,'YYYYMMDDHH24MISS'),
		curVal              =:ora_curVal:ora_curValZi,
		curPos              =:ora_curPos:ora_curPosZi,
		alarmMsg            =:ora_alarmMsg:ora_alarmMsgZi,
		sp2                 =:ora_sp2:ora_sp2Zi,
		sp3                 =:ora_sp3:ora_sp3Zi,
		sp4                 =:ora_sp4:ora_sp4Zi,
		sp5                 =:ora_sp5:ora_sp5Zi,
		sp6                 =:ora_sp6:ora_sp6Zi,
		sp7                 =:ora_sp7:ora_sp7Zi,
		toc                 =TO_DATE( :ora_toc:ora_tocZi,'YYYYMMDDHH24MISS'),
		tom                 =TO_DATE( :ora_tom:ora_tomZi,'YYYYMMDDHH24MISS'),
		mop                 =:ora_mop:ora_mopZi
	WHERE
		alarmNo         = :k_ora_alarmNo ;
	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//inserts a single entry from DB
char* ALARM_DAT::insertDB()
{
	//
	//copy the attributes ( ...) to Oracle Hosts( ora_..) 
	//
		copyAttributeToOracle();
	//
	// Do INSERT
	//
	EXEC SQL INSERT INTO ALARM_DAT
	(
		alarmNo,
		parmNo,
		grade,
		alarmTime,
		curVal,
		curPos,
		alarmMsg,
		sp2,
		sp3,
		sp4,
		sp5,
		sp6,
		sp7,
		toc,
		tom,
		mop
	)

	VALUES
	(
		:ora_alarmNo,
		:ora_parmNo:ora_parmNoZi,
		:ora_grade:ora_gradeZi,
		TO_DATE( :ora_alarmTime:ora_alarmTimeZi,'YYYYMMDDHH24MISS'),
		:ora_curVal:ora_curValZi,
		:ora_curPos:ora_curPosZi,
		:ora_alarmMsg:ora_alarmMsgZi,
		:ora_sp2:ora_sp2Zi,
		:ora_sp3:ora_sp3Zi,
		:ora_sp4:ora_sp4Zi,
		:ora_sp5:ora_sp5Zi,
		:ora_sp6:ora_sp6Zi,
		:ora_sp7:ora_sp7Zi,
		TO_DATE( :ora_toc:ora_tocZi,'YYYYMMDDHH24MISS'),
		TO_DATE( :ora_tom:ora_tomZi,'YYYYMMDDHH24MISS'),
		:ora_mop:ora_mopZi
	);
	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//this methode tries to update a DB record,when the update fails.
char* ALARM_DAT::storeDB()
{
	char* ret = NULL;
	setKeysFromRecord();
	ret=updateDB();
	if(ret != NULL)
	{
		ret=insertDB();
		if(ret != NULL)
		{
			dbAccess = false;
			return(ret);
		}
	}
	return(ret);
}

//deletes a single entry from DB
char* ALARM_DAT::deleteDB()
{
//
//copy the host variables (k_...) to Oracle Host Keys (k_ora_..)
//
	copyKeyToHost();

//
// Do Delete 
//
	EXEC SQL DELETE FROM ALARM_DAT
	WHERE
				alarmNo         = :k_ora_alarmNo ;

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

// Executes the SQL DELETE with a where clause
char* ALARM_DAT::deleteDB(const char* where,long* count)
{
	*(count) = -1L;
// Create dynamic statement.
//
	strcpy((char*)dynstr.arr,"DELETE");
	strcat((char*)dynstr.arr," FROM ALARM_DAT");
	if ( where != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, where );
	}

	dynstr.len = strlen( (char*) dynstr.arr);
	EXEC SQL EXECUTE IMMEDIATE :dynstr;
	oracleSqlCode = sqlca.sqlcode;
		oracleRowsProcessed = sqlca.sqlerrd[2];
	if (sqlca.sqlcode == 0 )
		*(count) = sqlca.sqlerrd[2];
	else 

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//openSetDB data with where condition and sort order.
char* ALARM_DAT::openSetDB(const char* where,char* order)
{
//
// Create dynamic statement.
//
	strcpy((char*)dynstr.arr,"SELECT ");
	strcat((char*)dynstr.arr,"alarmNo,");
	strcat((char*)dynstr.arr,"parmNo,");
	strcat((char*)dynstr.arr,"grade,");
	strcat((char*)dynstr.arr,"TO_CHAR(alarmTime , 'YYYYMMDDHH24MISS'),");
	strcat((char*)dynstr.arr,"curVal,");
	strcat((char*)dynstr.arr,"curPos,");
	strcat((char*)dynstr.arr,"alarmMsg,");
	strcat((char*)dynstr.arr,"sp2,");
	strcat((char*)dynstr.arr,"sp3,");
	strcat((char*)dynstr.arr,"sp4,");
	strcat((char*)dynstr.arr,"sp5,");
	strcat((char*)dynstr.arr,"sp6,");
	strcat((char*)dynstr.arr,"sp7,");
	strcat((char*)dynstr.arr,"TO_CHAR(toc , 'YYYYMMDDHH24MISS'),");
	strcat((char*)dynstr.arr,"TO_CHAR(tom , 'YYYYMMDDHH24MISS'),");
	strcat((char*)dynstr.arr,"mop");

	strcat((char*)dynstr.arr," FROM ALARM_DAT ");
	if ( where != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, where);
	}
	if ( order != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, order);
	}

	dynstr.len = strlen( (char*) dynstr.arr);
	EXEC SQL PREPARE set_ALARM_DAT FROM :dynstr;
	if (sqlca.sqlcode == 0 )
	{
		EXEC SQL DECLARE cu_ALARM_DAT CURSOR FOR set_ALARM_DAT;
		if (sqlca.sqlcode == 0 )
			EXEC SQL OPEN cu_ALARM_DAT;
	}

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	cuFl = OPENED;
	return ( NULL );
}

//Executes the SQL FETCH Statement .
char* ALARM_DAT::getSetDB()
{
	if ( cuFl != OPENED ) return ("No open Cursor Table:Me");
	EXEC SQL FETCH cu_ALARM_DAT INTO
		:ora_alarmNo,
		:ora_parmNo:ora_parmNoZi,
		:ora_grade:ora_gradeZi,
		:ora_alarmTime:ora_alarmTimeZi,
		:ora_curVal:ora_curValZi,
		:ora_curPos:ora_curPosZi,
		:ora_alarmMsg:ora_alarmMsgZi,
		:ora_sp2:ora_sp2Zi,
		:ora_sp3:ora_sp3Zi,
		:ora_sp4:ora_sp4Zi,
		:ora_sp5:ora_sp5Zi,
		:ora_sp6:ora_sp6Zi,
		:ora_sp7:ora_sp7Zi,
		:ora_toc:ora_tocZi,
		:ora_tom:ora_tomZi,
		:ora_mop:ora_mopZi;

	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		pCatch->catchError(sqlca.sqlcode);
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		return (char*) sqlca.sqlerrm.sqlerrmc ;
	}
	//
	// copy host variables into Class attributes
	//
	copyOracleToAttribute();
	copyHostToKey();
	return ( NULL );
}

//Close a Oracle Cursor
char* ALARM_DAT::closeSetDB()
{
	EXEC SQL CLOSE cu_ALARM_DAT;
	oracleSqlCode = sqlca.sqlcode;         
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		pCatch->catchError(sqlca.sqlcode);
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		return (char*) sqlca.sqlerrm.sqlerrmc ;
	}
	cuFl = CLOSED;
	return ( NULL );
}

//Executes the SQL count(key) for a where clause
char* ALARM_DAT::countDB(const char* where,long* count)
{
	*(count) = -1L;
//
// Create dynamic statement. 
//
	strncpy((char*)dynstr.arr,"SELECT count(alarmNo)", sizeof(dynstr.arr));
	strcat((char*)dynstr.arr," FROM ALARM_DAT");
	if ( where != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, where );
	}
	dynstr.len = strlen( (char*) dynstr.arr);
	EXEC SQL PREPARE c_ALARM_DAT FROM :dynstr;
	
	if (sqlca.sqlcode == 0 )
	{
		EXEC SQL DECLARE ct_ALARM_DAT CURSOR FOR c_ALARM_DAT;
		if (sqlca.sqlcode == 0 )
		{
			EXEC SQL OPEN ct_ALARM_DAT;
			if (sqlca.sqlcode == 0 )			{
				EXEC SQL FETCH ct_ALARM_DAT INTO :rowCnt;
				if (sqlca.sqlcode == 0 )
				*(count) = rowCnt;
			}
			EXEC SQL CLOSE ct_ALARM_DAT;
		}
	}

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//private methode copy Attribute to Oracle
//copys Object attributes into Oracle Host variables.
void ALARM_DAT::copyAttributeToOracle()
{
	char* ptrStr;
	ora_alarmNo = this->alarmNo();
	ora_parmNo = this->parmNo();
	ora_parmNoZi = this->parmNoZi();
	ora_grade = this->grade();
	ora_gradeZi = this->gradeZi();
	ptrStr = this->alarmTime();
	if( strlen(ptrStr)< sizeof(ora_alarmTime.arr))
	{
		strncpy((char*)ora_alarmTime.arr, ptrStr, sizeof(ora_alarmTime.arr));
		ora_alarmTime.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_alarmTime.len = 0;
	ora_alarmTimeZi = this->alarmTimeZi();
	ora_curVal = this->curVal();
	ora_curValZi = this->curValZi();
	ora_curPos = this->curPos();
	ora_curPosZi = this->curPosZi();
	ptrStr = this->alarmMsg();
	if( strlen(ptrStr)< sizeof(ora_alarmMsg.arr))
	{
		strncpy((char*)ora_alarmMsg.arr, ptrStr, sizeof(ora_alarmMsg.arr));
		ora_alarmMsg.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_alarmMsg.len = 0;
	ora_alarmMsgZi = this->alarmMsgZi();
	ora_sp2 = this->sp2();
	ora_sp2Zi = this->sp2Zi();
	ora_sp3 = this->sp3();
	ora_sp3Zi = this->sp3Zi();
	ora_sp4 = this->sp4();
	ora_sp4Zi = this->sp4Zi();
	ora_sp5 = this->sp5();
	ora_sp5Zi = this->sp5Zi();
	ora_sp6 = this->sp6();
	ora_sp6Zi = this->sp6Zi();
	ptrStr = this->sp7();
	if( strlen(ptrStr)< sizeof(ora_sp7.arr))
	{
		strncpy((char*)ora_sp7.arr, ptrStr, sizeof(ora_sp7.arr));
		ora_sp7.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_sp7.len = 0;
	ora_sp7Zi = this->sp7Zi();
	ptrStr = this->toc();
	if( strlen(ptrStr)< sizeof(ora_toc.arr))
	{
		strncpy((char*)ora_toc.arr, ptrStr, sizeof(ora_toc.arr));
		ora_toc.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_toc.len = 0;
	ora_tocZi = this->tocZi();
	ptrStr = this->tom();
	if( strlen(ptrStr)< sizeof(ora_tom.arr))
	{
		strncpy((char*)ora_tom.arr, ptrStr, sizeof(ora_tom.arr));
		ora_tom.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_tom.len = 0;
	ora_tomZi = this->tomZi();
	ptrStr = this->mop();
	if( strlen(ptrStr)< sizeof(ora_mop.arr))
	{
		strncpy((char*)ora_mop.arr, ptrStr, sizeof(ora_mop.arr));
		ora_mop.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_mop.len = 0;
	ora_mopZi = this->mopZi();
}

//private methode copy Oracle to Attribute
//copys Oracle Host variables into Object attributes.
void ALARM_DAT::copyOracleToAttribute()
{
	this->set_alarmNo((long)ora_alarmNo);
	this->set_parmNo((short)ora_parmNo);
	this->set_parmNoZi((short)ora_parmNoZi);
	this->set_grade((short)ora_grade);
	this->set_gradeZi((short)ora_gradeZi);
	ora_alarmTime.arr[ora_alarmTime.len] = '\0';
	this->set_alarmTime((char*) ora_alarmTime.arr);
	this->set_alarmTimeZi((short)ora_alarmTimeZi);
	this->set_curVal((float)ora_curVal);
	this->set_curValZi((short)ora_curValZi);
	this->set_curPos((long)ora_curPos);
	this->set_curPosZi((short)ora_curPosZi);
	ora_alarmMsg.arr[ora_alarmMsg.len] = '\0';
	this->set_alarmMsg((char*) ora_alarmMsg.arr);
	this->set_alarmMsgZi((short)ora_alarmMsgZi);
	this->set_sp2((long)ora_sp2);
	this->set_sp2Zi((short)ora_sp2Zi);
	this->set_sp3((short)ora_sp3);
	this->set_sp3Zi((short)ora_sp3Zi);
	this->set_sp4((short)ora_sp4);
	this->set_sp4Zi((short)ora_sp4Zi);
	this->set_sp5((float)ora_sp5);
	this->set_sp5Zi((short)ora_sp5Zi);
	this->set_sp6((float)ora_sp6);
	this->set_sp6Zi((short)ora_sp6Zi);
	ora_sp7.arr[ora_sp7.len] = '\0';
	this->set_sp7((char*) ora_sp7.arr);
	this->set_sp7Zi((short)ora_sp7Zi);
	ora_toc.arr[ora_toc.len] = '\0';
	this->set_toc((char*) ora_toc.arr);
	this->set_tocZi((short)ora_tocZi);
	ora_tom.arr[ora_tom.len] = '\0';
	this->set_tom((char*) ora_tom.arr);
	this->set_tomZi((short)ora_tomZi);
	ora_mop.arr[ora_mop.len] = '\0';
	this->set_mop((char*) ora_mop.arr);
	this->set_mopZi((short)ora_mopZi);
}

//private methode copy Key to host
//copys Object attributes into Oralce Key variables.
void ALARM_DAT::copyKeyToHost()
{
	char* ptrStr;
	k_ora_alarmNo = this->k_alarmNo();
}

//private methode copy Host to Key
// copys Oracle Host Key variables into Object Key attributes.
void ALARM_DAT::copyHostToKey()
{
	this->set_k_alarmNo((long)ora_alarmNo);
}

//private methode log Oracle message information
void ALARM_DAT::logOraMessageInfo()
{
	LOG d("ALARM_DAT::logOraMessageInfo()");
	sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
	oraca.orastxt.orastxtc[oraca.orastxt.orastxtl] = '\0';
	oraca.orasfnm.orasfnmc[oraca.orasfnm.orasfnml] = '\0';
	
	//* negating a error code submitted perhaps positively.
	if (sqlca.sqlcode > 0) sqlca.sqlcode *= -1;
	
	//* Distribute fault text, SQL statement and file in the Debug System.
	d << "ORA-Error: "<< sqlca.sqlerrm.sqlerrmc; d.Info();
	d << "OracaText: "<< oraca.orastxt.orastxtc; d.Info();
	d << "in line " << oraca.oraslnr << " in file " << oraca.orasfnm.orasfnmc; d.Info();
}

//this methode stores the unique key attributes
void ALARM_DAT::setPrimKey(long arg1)
{
	l_k_alarmNo = arg1;
}

//this methode stores the unique key attributes
void ALARM_DAT::initInsertKeys(long arg1)
{
	setPrimKey(arg1);
	l_alarmNo = arg1;
}

//this methode set the unique key attributes from the DB Record Attributes
void ALARM_DAT::setKeysFromRecord()
{
	set_k_alarmNo( alarmNo() );
}

//			         
//O P E R A T O R  + 
//===================
//                   
ALARM_DAT ALARM_DAT::operator+(const ALARM_DAT &inst) const
{
	ALARM_DAT ptrALARM_DAT(*this);
//----------------------------------------------------------
	ptrALARM_DAT.set_alarmNo(inst.alarmNo());
//----------------------------------------------------------
	if(inst.parmNoZi() != -1)
	{
		ptrALARM_DAT.set_parmNo(inst.parmNo());
		ptrALARM_DAT.set_parmNoZi(inst.parmNoZi());
	}
//----------------------------------------------------------
	if(inst.gradeZi() != -1)
	{
		ptrALARM_DAT.set_grade(inst.grade());
		ptrALARM_DAT.set_gradeZi(inst.gradeZi());
	}
//----------------------------------------------------------
	if(inst.alarmTimeZi() != -1)
	{
		ptrALARM_DAT.set_alarmTime(inst.alarmTime());
		ptrALARM_DAT.set_alarmTimeZi(inst.alarmTimeZi());
	}
//----------------------------------------------------------
	if(inst.curValZi() != -1)
	{
		ptrALARM_DAT.set_curVal(inst.curVal());
		ptrALARM_DAT.set_curValZi(inst.curValZi());
	}
//----------------------------------------------------------
	if(inst.curPosZi() != -1)
	{
		ptrALARM_DAT.set_curPos(inst.curPos());
		ptrALARM_DAT.set_curPosZi(inst.curPosZi());
	}
//----------------------------------------------------------
	if(inst.alarmMsgZi() != -1)
	{
		ptrALARM_DAT.set_alarmMsg(inst.alarmMsg());
		ptrALARM_DAT.set_alarmMsgZi(inst.alarmMsgZi());
	}
//----------------------------------------------------------
	if(inst.sp2Zi() != -1)
	{
		ptrALARM_DAT.set_sp2(inst.sp2());
		ptrALARM_DAT.set_sp2Zi(inst.sp2Zi());
	}
//----------------------------------------------------------
	if(inst.sp3Zi() != -1)
	{
		ptrALARM_DAT.set_sp3(inst.sp3());
		ptrALARM_DAT.set_sp3Zi(inst.sp3Zi());
	}
//----------------------------------------------------------
	if(inst.sp4Zi() != -1)
	{
		ptrALARM_DAT.set_sp4(inst.sp4());
		ptrALARM_DAT.set_sp4Zi(inst.sp4Zi());
	}
//----------------------------------------------------------
	if(inst.sp5Zi() != -1)
	{
		ptrALARM_DAT.set_sp5(inst.sp5());
		ptrALARM_DAT.set_sp5Zi(inst.sp5Zi());
	}
//----------------------------------------------------------
	if(inst.sp6Zi() != -1)
	{
		ptrALARM_DAT.set_sp6(inst.sp6());
		ptrALARM_DAT.set_sp6Zi(inst.sp6Zi());
	}
//----------------------------------------------------------
	if(inst.sp7Zi() != -1)
	{
		ptrALARM_DAT.set_sp7(inst.sp7());
		ptrALARM_DAT.set_sp7Zi(inst.sp7Zi());
	}
//----------------------------------------------------------
	if(inst.tocZi() != -1)
	{
		ptrALARM_DAT.set_toc(inst.toc());
		ptrALARM_DAT.set_tocZi(inst.tocZi());
	}
//----------------------------------------------------------
	if(inst.tomZi() != -1)
	{
		ptrALARM_DAT.set_tom(inst.tom());
		ptrALARM_DAT.set_tomZi(inst.tomZi());
	}
//----------------------------------------------------------
	if(inst.mopZi() != -1)
	{
		ptrALARM_DAT.set_mop(inst.mop());
		ptrALARM_DAT.set_mopZi(inst.mopZi());
	}
	return( ptrALARM_DAT );
}

//			         
//O P E R A T O R  = 
//===================
//                   
const ALARM_DAT& ALARM_DAT::operator=(const ALARM_DAT &inst)
{
//----------------------------------------------------------
	this->set_alarmNo(inst.alarmNo());
//----------------------------------------------------------
	this->set_parmNo(inst.parmNo());
	this->set_parmNoZi(inst.parmNoZi());
//----------------------------------------------------------
	this->set_grade(inst.grade());
	this->set_gradeZi(inst.gradeZi());
//----------------------------------------------------------
	this->set_alarmTime(inst.alarmTime());
	this->set_alarmTimeZi(inst.alarmTimeZi());
//----------------------------------------------------------
	this->set_curVal(inst.curVal());
	this->set_curValZi(inst.curValZi());
//----------------------------------------------------------
	this->set_curPos(inst.curPos());
	this->set_curPosZi(inst.curPosZi());
//----------------------------------------------------------
	this->set_alarmMsg(inst.alarmMsg());
	this->set_alarmMsgZi(inst.alarmMsgZi());
//----------------------------------------------------------
	this->set_sp2(inst.sp2());
	this->set_sp2Zi(inst.sp2Zi());
//----------------------------------------------------------
	this->set_sp3(inst.sp3());
	this->set_sp3Zi(inst.sp3Zi());
//----------------------------------------------------------
	this->set_sp4(inst.sp4());
	this->set_sp4Zi(inst.sp4Zi());
//----------------------------------------------------------
	this->set_sp5(inst.sp5());
	this->set_sp5Zi(inst.sp5Zi());
//----------------------------------------------------------
	this->set_sp6(inst.sp6());
	this->set_sp6Zi(inst.sp6Zi());
//----------------------------------------------------------
	this->set_sp7(inst.sp7());
	this->set_sp7Zi(inst.sp7Zi());
//----------------------------------------------------------
	this->set_toc(inst.toc());
	this->set_tocZi(inst.tocZi());
//----------------------------------------------------------
	this->set_tom(inst.tom());
	this->set_tomZi(inst.tomZi());
//----------------------------------------------------------
	this->set_mop(inst.mop());
	this->set_mopZi(inst.mopZi());
	return(*this);
}

