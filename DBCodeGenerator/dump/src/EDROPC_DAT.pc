/* *******************************************************************/
/* *   File               :    EDROPC_DAT.pc
/* *   Short Description  :    ORACLE DATABASE ACCESS
/* * 		                   EDGE DROP DATA BULK   STORAGE TABLE
/* *   Author             :    DB CODE Generator
/* *   Created Date       :    13.06.2013
/* *   Tech.Support       :    LiuWeiZhao. email:welljoe@hotmail.com 
/* *******************************************************************/
/* *   Copyright (c)  SGAI AI 2009   All Rights Reserved
/* *******************************************************************/

#include "LOG.h"
#include "EDROPC_DAT.h"
//
// Declare ORACLE Host Variables
//

#define SQLCA_STORAGE_CLASS static
#define ORACA_STORAGE_CLASS static
EXEC SQL INCLUDE sqlca;
EXEC SQL INCLUDE oraca;

#define OPENED 1
#define CLOSED 2
EXEC SQL BEGIN DECLARE SECTION;
/* ****************************************************************************** */
/*                                                                                */
/*                               define Oracle                                    */
/*                               Host Variables                                   */
/*                                                          .                     */
/*                                                                                */
/* ****************************************************************************** */

static VARCHAR	dynstr[16000];
static long		rowCnt;       
static long		cuFl;         
//Unit[-]:Product coil number.Limit:[-,-]
static VARCHAR  ora_hcoil[17];
//Unit[-]:Hot coil number.Limit:[-,-]
static short    ora_edtno;
//Unit[-]:edge data no.Limit:[-,1]
static short    ora_len;
static short    ora_lenZi;
//Unit[-]:Every Point length (m).Limit:[-,-]
static VARCHAR  ora_mestim[17];
static short    ora_mestimZi;
//Unit[-]:MeasTime.Limit:[-,-]
static short    ora_ws_dt1;
static short    ora_ws_dt1Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt2;
static short    ora_ws_dt2Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt3;
static short    ora_ws_dt3Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt4;
static short    ora_ws_dt4Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt5;
static short    ora_ws_dt5Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt6;
static short    ora_ws_dt6Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt7;
static short    ora_ws_dt7Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt8;
static short    ora_ws_dt8Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt9;
static short    ora_ws_dt9Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt10;
static short    ora_ws_dt10Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt11;
static short    ora_ws_dt11Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt12;
static short    ora_ws_dt12Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt13;
static short    ora_ws_dt13Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt14;
static short    ora_ws_dt14Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt15;
static short    ora_ws_dt15Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt16;
static short    ora_ws_dt16Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt17;
static short    ora_ws_dt17Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt18;
static short    ora_ws_dt18Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt19;
static short    ora_ws_dt19Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ws_dt20;
static short    ora_ws_dt20Zi;
//Unit[I]:WS Edge drop data.Limit:[-,-]
static short    ora_ds_dt1;
static short    ora_ds_dt1Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt2;
static short    ora_ds_dt2Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt3;
static short    ora_ds_dt3Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt4;
static short    ora_ds_dt4Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt5;
static short    ora_ds_dt5Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt6;
static short    ora_ds_dt6Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt7;
static short    ora_ds_dt7Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt8;
static short    ora_ds_dt8Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt9;
static short    ora_ds_dt9Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt10;
static short    ora_ds_dt10Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt11;
static short    ora_ds_dt11Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt12;
static short    ora_ds_dt12Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt13;
static short    ora_ds_dt13Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt14;
static short    ora_ds_dt14Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt15;
static short    ora_ds_dt15Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt16;
static short    ora_ds_dt16Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt17;
static short    ora_ds_dt17Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt18;
static short    ora_ds_dt18Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt19;
static short    ora_ds_dt19Zi;
//Unit[I]:DS Edge drop data.Limit:[-,-]
static short    ora_ds_dt20;
static short    ora_ds_dt20Zi;
//Unit[-]:modify time.Limit:[-,-]
static VARCHAR  ora_toc[15];
static short    ora_tocZi;
//Unit[-]:creator or modifyer.Limit:[-,-]
static VARCHAR  ora_tom[121];
static short    ora_tomZi;
//Unit[-]:creator or modifyer.Limit:[-,-]
static VARCHAR  ora_mop[121];
static short    ora_mopZi;
// Host arguments for Primary key
static VARCHAR  k_ora_hcoil[17];   // Unit[-]:Product coil number.Limit:[-,-]
static short    k_ora_edtno;   // Unit[-]:Hot coil number.Limit:[-,-]

EXEC SQL END DECLARE SECTION; 
             
// 				             
//C O N S T R U C T O R S    
//=======================    
//                           
EDROPC_DAT::EDROPC_DAT()
{
	initial();                                             
}

//					
//C O P Y  -  C O N S T R U C T O R 
//==================================
EDROPC_DAT::EDROPC_DAT(const EDROPC_DAT &inst)
{
//----------------------------------------------------------
	this->set_hcoil(inst.hcoil());
//----------------------------------------------------------
	this->set_edtno(inst.edtno());
//----------------------------------------------------------
	this->set_len(inst.len());
	this->set_lenZi(inst.lenZi());
//----------------------------------------------------------
	this->set_mestim(inst.mestim());
	this->set_mestimZi(inst.mestimZi());
//----------------------------------------------------------
	this->set_ws_dt1(inst.ws_dt1());
	this->set_ws_dt1Zi(inst.ws_dt1Zi());
//----------------------------------------------------------
	this->set_ws_dt2(inst.ws_dt2());
	this->set_ws_dt2Zi(inst.ws_dt2Zi());
//----------------------------------------------------------
	this->set_ws_dt3(inst.ws_dt3());
	this->set_ws_dt3Zi(inst.ws_dt3Zi());
//----------------------------------------------------------
	this->set_ws_dt4(inst.ws_dt4());
	this->set_ws_dt4Zi(inst.ws_dt4Zi());
//----------------------------------------------------------
	this->set_ws_dt5(inst.ws_dt5());
	this->set_ws_dt5Zi(inst.ws_dt5Zi());
//----------------------------------------------------------
	this->set_ws_dt6(inst.ws_dt6());
	this->set_ws_dt6Zi(inst.ws_dt6Zi());
//----------------------------------------------------------
	this->set_ws_dt7(inst.ws_dt7());
	this->set_ws_dt7Zi(inst.ws_dt7Zi());
//----------------------------------------------------------
	this->set_ws_dt8(inst.ws_dt8());
	this->set_ws_dt8Zi(inst.ws_dt8Zi());
//----------------------------------------------------------
	this->set_ws_dt9(inst.ws_dt9());
	this->set_ws_dt9Zi(inst.ws_dt9Zi());
//----------------------------------------------------------
	this->set_ws_dt10(inst.ws_dt10());
	this->set_ws_dt10Zi(inst.ws_dt10Zi());
//----------------------------------------------------------
	this->set_ws_dt11(inst.ws_dt11());
	this->set_ws_dt11Zi(inst.ws_dt11Zi());
//----------------------------------------------------------
	this->set_ws_dt12(inst.ws_dt12());
	this->set_ws_dt12Zi(inst.ws_dt12Zi());
//----------------------------------------------------------
	this->set_ws_dt13(inst.ws_dt13());
	this->set_ws_dt13Zi(inst.ws_dt13Zi());
//----------------------------------------------------------
	this->set_ws_dt14(inst.ws_dt14());
	this->set_ws_dt14Zi(inst.ws_dt14Zi());
//----------------------------------------------------------
	this->set_ws_dt15(inst.ws_dt15());
	this->set_ws_dt15Zi(inst.ws_dt15Zi());
//----------------------------------------------------------
	this->set_ws_dt16(inst.ws_dt16());
	this->set_ws_dt16Zi(inst.ws_dt16Zi());
//----------------------------------------------------------
	this->set_ws_dt17(inst.ws_dt17());
	this->set_ws_dt17Zi(inst.ws_dt17Zi());
//----------------------------------------------------------
	this->set_ws_dt18(inst.ws_dt18());
	this->set_ws_dt18Zi(inst.ws_dt18Zi());
//----------------------------------------------------------
	this->set_ws_dt19(inst.ws_dt19());
	this->set_ws_dt19Zi(inst.ws_dt19Zi());
//----------------------------------------------------------
	this->set_ws_dt20(inst.ws_dt20());
	this->set_ws_dt20Zi(inst.ws_dt20Zi());
//----------------------------------------------------------
	this->set_ds_dt1(inst.ds_dt1());
	this->set_ds_dt1Zi(inst.ds_dt1Zi());
//----------------------------------------------------------
	this->set_ds_dt2(inst.ds_dt2());
	this->set_ds_dt2Zi(inst.ds_dt2Zi());
//----------------------------------------------------------
	this->set_ds_dt3(inst.ds_dt3());
	this->set_ds_dt3Zi(inst.ds_dt3Zi());
//----------------------------------------------------------
	this->set_ds_dt4(inst.ds_dt4());
	this->set_ds_dt4Zi(inst.ds_dt4Zi());
//----------------------------------------------------------
	this->set_ds_dt5(inst.ds_dt5());
	this->set_ds_dt5Zi(inst.ds_dt5Zi());
//----------------------------------------------------------
	this->set_ds_dt6(inst.ds_dt6());
	this->set_ds_dt6Zi(inst.ds_dt6Zi());
//----------------------------------------------------------
	this->set_ds_dt7(inst.ds_dt7());
	this->set_ds_dt7Zi(inst.ds_dt7Zi());
//----------------------------------------------------------
	this->set_ds_dt8(inst.ds_dt8());
	this->set_ds_dt8Zi(inst.ds_dt8Zi());
//----------------------------------------------------------
	this->set_ds_dt9(inst.ds_dt9());
	this->set_ds_dt9Zi(inst.ds_dt9Zi());
//----------------------------------------------------------
	this->set_ds_dt10(inst.ds_dt10());
	this->set_ds_dt10Zi(inst.ds_dt10Zi());
//----------------------------------------------------------
	this->set_ds_dt11(inst.ds_dt11());
	this->set_ds_dt11Zi(inst.ds_dt11Zi());
//----------------------------------------------------------
	this->set_ds_dt12(inst.ds_dt12());
	this->set_ds_dt12Zi(inst.ds_dt12Zi());
//----------------------------------------------------------
	this->set_ds_dt13(inst.ds_dt13());
	this->set_ds_dt13Zi(inst.ds_dt13Zi());
//----------------------------------------------------------
	this->set_ds_dt14(inst.ds_dt14());
	this->set_ds_dt14Zi(inst.ds_dt14Zi());
//----------------------------------------------------------
	this->set_ds_dt15(inst.ds_dt15());
	this->set_ds_dt15Zi(inst.ds_dt15Zi());
//----------------------------------------------------------
	this->set_ds_dt16(inst.ds_dt16());
	this->set_ds_dt16Zi(inst.ds_dt16Zi());
//----------------------------------------------------------
	this->set_ds_dt17(inst.ds_dt17());
	this->set_ds_dt17Zi(inst.ds_dt17Zi());
//----------------------------------------------------------
	this->set_ds_dt18(inst.ds_dt18());
	this->set_ds_dt18Zi(inst.ds_dt18Zi());
//----------------------------------------------------------
	this->set_ds_dt19(inst.ds_dt19());
	this->set_ds_dt19Zi(inst.ds_dt19Zi());
//----------------------------------------------------------
	this->set_ds_dt20(inst.ds_dt20());
	this->set_ds_dt20Zi(inst.ds_dt20Zi());
//----------------------------------------------------------
	this->set_toc(inst.toc());
	this->set_tocZi(inst.tocZi());
//----------------------------------------------------------
	this->set_tom(inst.tom());
	this->set_tomZi(inst.tomZi());
//----------------------------------------------------------
	this->set_mop(inst.mop());
	this->set_mopZi(inst.mopZi());
}

//					
//C O N S T R U C T O R -W I T H P A R A M E T E R S
//===================================================
//					
EDROPC_DAT::EDROPC_DAT(char* arg1,short arg2)
{
	initial();					               
	setPrimKey (arg1,arg2);    
	//read DB record                           
	dbAccess = true;                           
	dbMessage = readDB();                      
	if ( dbMessage != NULL ) dbAccess = false; 
}

//D E S T R U C T O R S  
//=======================
//                       
EDROPC_DAT::~EDROPC_DAT()
{
}

//initialise all member variables
void EDROPC_DAT::initial()
{
	set_hcoil("");
	set_edtno(0);
	set_len(0);
	set_lenZi(-1);
	set_mestim("");
	set_mestimZi(-1);
	set_ws_dt1(0);
	set_ws_dt1Zi(-1);
	set_ws_dt2(0);
	set_ws_dt2Zi(-1);
	set_ws_dt3(0);
	set_ws_dt3Zi(-1);
	set_ws_dt4(0);
	set_ws_dt4Zi(-1);
	set_ws_dt5(0);
	set_ws_dt5Zi(-1);
	set_ws_dt6(0);
	set_ws_dt6Zi(-1);
	set_ws_dt7(0);
	set_ws_dt7Zi(-1);
	set_ws_dt8(0);
	set_ws_dt8Zi(-1);
	set_ws_dt9(0);
	set_ws_dt9Zi(-1);
	set_ws_dt10(0);
	set_ws_dt10Zi(-1);
	set_ws_dt11(0);
	set_ws_dt11Zi(-1);
	set_ws_dt12(0);
	set_ws_dt12Zi(-1);
	set_ws_dt13(0);
	set_ws_dt13Zi(-1);
	set_ws_dt14(0);
	set_ws_dt14Zi(-1);
	set_ws_dt15(0);
	set_ws_dt15Zi(-1);
	set_ws_dt16(0);
	set_ws_dt16Zi(-1);
	set_ws_dt17(0);
	set_ws_dt17Zi(-1);
	set_ws_dt18(0);
	set_ws_dt18Zi(-1);
	set_ws_dt19(0);
	set_ws_dt19Zi(-1);
	set_ws_dt20(0);
	set_ws_dt20Zi(-1);
	set_ds_dt1(0);
	set_ds_dt1Zi(-1);
	set_ds_dt2(0);
	set_ds_dt2Zi(-1);
	set_ds_dt3(0);
	set_ds_dt3Zi(-1);
	set_ds_dt4(0);
	set_ds_dt4Zi(-1);
	set_ds_dt5(0);
	set_ds_dt5Zi(-1);
	set_ds_dt6(0);
	set_ds_dt6Zi(-1);
	set_ds_dt7(0);
	set_ds_dt7Zi(-1);
	set_ds_dt8(0);
	set_ds_dt8Zi(-1);
	set_ds_dt9(0);
	set_ds_dt9Zi(-1);
	set_ds_dt10(0);
	set_ds_dt10Zi(-1);
	set_ds_dt11(0);
	set_ds_dt11Zi(-1);
	set_ds_dt12(0);
	set_ds_dt12Zi(-1);
	set_ds_dt13(0);
	set_ds_dt13Zi(-1);
	set_ds_dt14(0);
	set_ds_dt14Zi(-1);
	set_ds_dt15(0);
	set_ds_dt15Zi(-1);
	set_ds_dt16(0);
	set_ds_dt16Zi(-1);
	set_ds_dt17(0);
	set_ds_dt17Zi(-1);
	set_ds_dt18(0);
	set_ds_dt18Zi(-1);
	set_ds_dt19(0);
	set_ds_dt19Zi(-1);
	set_ds_dt20(0);
	set_ds_dt20Zi(-1);
	set_toc("");
	set_tocZi(-1);
	set_tom("");
	set_tomZi(-1);
	set_mop("");
	set_mopZi(-1);
	//initialies Primary key members
	set_k_hcoil("");
	set_k_edtno(0);
// Initial Oracle Options
	oraca.oradbgf  = 1; // gather debug informations       
	oraca.oracchf  = 1; // gather cursor cache informations
	oraca.orahchf  = 1; // check heap                      
	oraca.orastxtf = 3; // always save last sql-statement  
	                                                       
	EXEC ORACLE OPTION (ORACA=YES);                        
	EXEC ORACLE OPTION (HOLD_CURSOR=YES);                  
	EXEC ORACLE OPTION (RELEASE_CURSOR=NO);                
	EXEC ORACLE OPTION (MAXOPENCURSORS=50);                
	pCatch = CatchDbaxError::instance();                   
	                                                       
}

//read a single entry from DB.
char* EDROPC_DAT::readDB()
{
	//
	//copy the host variables (k_...) to Oracle Host Keys (k_ora_..)
	//
		copyKeyToHost();
	//
	// Do SELECT
	//
	EXEC SQL SELECT 
		hcoil,
		edtno,
		len,
		mestim,
		ws_dt1,
		ws_dt2,
		ws_dt3,
		ws_dt4,
		ws_dt5,
		ws_dt6,
		ws_dt7,
		ws_dt8,
		ws_dt9,
		ws_dt10,
		ws_dt11,
		ws_dt12,
		ws_dt13,
		ws_dt14,
		ws_dt15,
		ws_dt16,
		ws_dt17,
		ws_dt18,
		ws_dt19,
		ws_dt20,
		ds_dt1,
		ds_dt2,
		ds_dt3,
		ds_dt4,
		ds_dt5,
		ds_dt6,
		ds_dt7,
		ds_dt8,
		ds_dt9,
		ds_dt10,
		ds_dt11,
		ds_dt12,
		ds_dt13,
		ds_dt14,
		ds_dt15,
		ds_dt16,
		ds_dt17,
		ds_dt18,
		ds_dt19,
		ds_dt20,
		TO_CHAR(toc , 'YYYYMMDDHH24MISS'),
		tom,
		mop
	INTO
		:ora_hcoil,
		:ora_edtno,
		:ora_len:ora_lenZi,
		:ora_mestim:ora_mestimZi,
		:ora_ws_dt1:ora_ws_dt1Zi,
		:ora_ws_dt2:ora_ws_dt2Zi,
		:ora_ws_dt3:ora_ws_dt3Zi,
		:ora_ws_dt4:ora_ws_dt4Zi,
		:ora_ws_dt5:ora_ws_dt5Zi,
		:ora_ws_dt6:ora_ws_dt6Zi,
		:ora_ws_dt7:ora_ws_dt7Zi,
		:ora_ws_dt8:ora_ws_dt8Zi,
		:ora_ws_dt9:ora_ws_dt9Zi,
		:ora_ws_dt10:ora_ws_dt10Zi,
		:ora_ws_dt11:ora_ws_dt11Zi,
		:ora_ws_dt12:ora_ws_dt12Zi,
		:ora_ws_dt13:ora_ws_dt13Zi,
		:ora_ws_dt14:ora_ws_dt14Zi,
		:ora_ws_dt15:ora_ws_dt15Zi,
		:ora_ws_dt16:ora_ws_dt16Zi,
		:ora_ws_dt17:ora_ws_dt17Zi,
		:ora_ws_dt18:ora_ws_dt18Zi,
		:ora_ws_dt19:ora_ws_dt19Zi,
		:ora_ws_dt20:ora_ws_dt20Zi,
		:ora_ds_dt1:ora_ds_dt1Zi,
		:ora_ds_dt2:ora_ds_dt2Zi,
		:ora_ds_dt3:ora_ds_dt3Zi,
		:ora_ds_dt4:ora_ds_dt4Zi,
		:ora_ds_dt5:ora_ds_dt5Zi,
		:ora_ds_dt6:ora_ds_dt6Zi,
		:ora_ds_dt7:ora_ds_dt7Zi,
		:ora_ds_dt8:ora_ds_dt8Zi,
		:ora_ds_dt9:ora_ds_dt9Zi,
		:ora_ds_dt10:ora_ds_dt10Zi,
		:ora_ds_dt11:ora_ds_dt11Zi,
		:ora_ds_dt12:ora_ds_dt12Zi,
		:ora_ds_dt13:ora_ds_dt13Zi,
		:ora_ds_dt14:ora_ds_dt14Zi,
		:ora_ds_dt15:ora_ds_dt15Zi,
		:ora_ds_dt16:ora_ds_dt16Zi,
		:ora_ds_dt17:ora_ds_dt17Zi,
		:ora_ds_dt18:ora_ds_dt18Zi,
		:ora_ds_dt19:ora_ds_dt19Zi,
		:ora_ds_dt20:ora_ds_dt20Zi,
		:ora_toc:ora_tocZi,
		:ora_tom:ora_tomZi,
		:ora_mop:ora_mopZi
	FROM EDROPC_DAT
	WHERE
				hcoil           = :k_ora_hcoil AND 
				edtno           = :k_ora_edtno ;
	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	//
	// copy host variables into Class attributes
	//
	copyOracleToAttribute();
	return ( NULL );
}

//updates a single entry from DB
char* EDROPC_DAT::updateDB()
{
	//
	//copy the host variables (k_...) to Oracle Host Keys (k_ora_..)
	//
		copyKeyToHost();
	//copy the attributes ( ...) to Oracle Hosts( ora_..)
	//
		copyAttributeToOracle();
	//
	// Do UPDATE
	//
	EXEC SQL UPDATE EDROPC_DAT
	SET 
		hcoil               =:ora_hcoil,
		edtno               =:ora_edtno,
		len                 =:ora_len:ora_lenZi,
		mestim              =:ora_mestim:ora_mestimZi,
		ws_dt1              =:ora_ws_dt1:ora_ws_dt1Zi,
		ws_dt2              =:ora_ws_dt2:ora_ws_dt2Zi,
		ws_dt3              =:ora_ws_dt3:ora_ws_dt3Zi,
		ws_dt4              =:ora_ws_dt4:ora_ws_dt4Zi,
		ws_dt5              =:ora_ws_dt5:ora_ws_dt5Zi,
		ws_dt6              =:ora_ws_dt6:ora_ws_dt6Zi,
		ws_dt7              =:ora_ws_dt7:ora_ws_dt7Zi,
		ws_dt8              =:ora_ws_dt8:ora_ws_dt8Zi,
		ws_dt9              =:ora_ws_dt9:ora_ws_dt9Zi,
		ws_dt10             =:ora_ws_dt10:ora_ws_dt10Zi,
		ws_dt11             =:ora_ws_dt11:ora_ws_dt11Zi,
		ws_dt12             =:ora_ws_dt12:ora_ws_dt12Zi,
		ws_dt13             =:ora_ws_dt13:ora_ws_dt13Zi,
		ws_dt14             =:ora_ws_dt14:ora_ws_dt14Zi,
		ws_dt15             =:ora_ws_dt15:ora_ws_dt15Zi,
		ws_dt16             =:ora_ws_dt16:ora_ws_dt16Zi,
		ws_dt17             =:ora_ws_dt17:ora_ws_dt17Zi,
		ws_dt18             =:ora_ws_dt18:ora_ws_dt18Zi,
		ws_dt19             =:ora_ws_dt19:ora_ws_dt19Zi,
		ws_dt20             =:ora_ws_dt20:ora_ws_dt20Zi,
		ds_dt1              =:ora_ds_dt1:ora_ds_dt1Zi,
		ds_dt2              =:ora_ds_dt2:ora_ds_dt2Zi,
		ds_dt3              =:ora_ds_dt3:ora_ds_dt3Zi,
		ds_dt4              =:ora_ds_dt4:ora_ds_dt4Zi,
		ds_dt5              =:ora_ds_dt5:ora_ds_dt5Zi,
		ds_dt6              =:ora_ds_dt6:ora_ds_dt6Zi,
		ds_dt7              =:ora_ds_dt7:ora_ds_dt7Zi,
		ds_dt8              =:ora_ds_dt8:ora_ds_dt8Zi,
		ds_dt9              =:ora_ds_dt9:ora_ds_dt9Zi,
		ds_dt10             =:ora_ds_dt10:ora_ds_dt10Zi,
		ds_dt11             =:ora_ds_dt11:ora_ds_dt11Zi,
		ds_dt12             =:ora_ds_dt12:ora_ds_dt12Zi,
		ds_dt13             =:ora_ds_dt13:ora_ds_dt13Zi,
		ds_dt14             =:ora_ds_dt14:ora_ds_dt14Zi,
		ds_dt15             =:ora_ds_dt15:ora_ds_dt15Zi,
		ds_dt16             =:ora_ds_dt16:ora_ds_dt16Zi,
		ds_dt17             =:ora_ds_dt17:ora_ds_dt17Zi,
		ds_dt18             =:ora_ds_dt18:ora_ds_dt18Zi,
		ds_dt19             =:ora_ds_dt19:ora_ds_dt19Zi,
		ds_dt20             =:ora_ds_dt20:ora_ds_dt20Zi,
		toc                 =TO_DATE( :ora_toc:ora_tocZi,'YYYYMMDDHH24MISS'),
		tom                 =:ora_tom:ora_tomZi,
		mop                 =:ora_mop:ora_mopZi
	WHERE
		hcoil           = :k_ora_hcoil AND 
		edtno           = :k_ora_edtno ;
	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//inserts a single entry from DB
char* EDROPC_DAT::insertDB()
{
	//
	//copy the attributes ( ...) to Oracle Hosts( ora_..) 
	//
		copyAttributeToOracle();
	//
	// Do INSERT
	//
	EXEC SQL INSERT INTO EDROPC_DAT
	(
		hcoil,
		edtno,
		len,
		mestim,
		ws_dt1,
		ws_dt2,
		ws_dt3,
		ws_dt4,
		ws_dt5,
		ws_dt6,
		ws_dt7,
		ws_dt8,
		ws_dt9,
		ws_dt10,
		ws_dt11,
		ws_dt12,
		ws_dt13,
		ws_dt14,
		ws_dt15,
		ws_dt16,
		ws_dt17,
		ws_dt18,
		ws_dt19,
		ws_dt20,
		ds_dt1,
		ds_dt2,
		ds_dt3,
		ds_dt4,
		ds_dt5,
		ds_dt6,
		ds_dt7,
		ds_dt8,
		ds_dt9,
		ds_dt10,
		ds_dt11,
		ds_dt12,
		ds_dt13,
		ds_dt14,
		ds_dt15,
		ds_dt16,
		ds_dt17,
		ds_dt18,
		ds_dt19,
		ds_dt20,
		toc,
		tom,
		mop
	)

	VALUES
	(
		:ora_hcoil,
		:ora_edtno,
		:ora_len:ora_lenZi,
		:ora_mestim:ora_mestimZi,
		:ora_ws_dt1:ora_ws_dt1Zi,
		:ora_ws_dt2:ora_ws_dt2Zi,
		:ora_ws_dt3:ora_ws_dt3Zi,
		:ora_ws_dt4:ora_ws_dt4Zi,
		:ora_ws_dt5:ora_ws_dt5Zi,
		:ora_ws_dt6:ora_ws_dt6Zi,
		:ora_ws_dt7:ora_ws_dt7Zi,
		:ora_ws_dt8:ora_ws_dt8Zi,
		:ora_ws_dt9:ora_ws_dt9Zi,
		:ora_ws_dt10:ora_ws_dt10Zi,
		:ora_ws_dt11:ora_ws_dt11Zi,
		:ora_ws_dt12:ora_ws_dt12Zi,
		:ora_ws_dt13:ora_ws_dt13Zi,
		:ora_ws_dt14:ora_ws_dt14Zi,
		:ora_ws_dt15:ora_ws_dt15Zi,
		:ora_ws_dt16:ora_ws_dt16Zi,
		:ora_ws_dt17:ora_ws_dt17Zi,
		:ora_ws_dt18:ora_ws_dt18Zi,
		:ora_ws_dt19:ora_ws_dt19Zi,
		:ora_ws_dt20:ora_ws_dt20Zi,
		:ora_ds_dt1:ora_ds_dt1Zi,
		:ora_ds_dt2:ora_ds_dt2Zi,
		:ora_ds_dt3:ora_ds_dt3Zi,
		:ora_ds_dt4:ora_ds_dt4Zi,
		:ora_ds_dt5:ora_ds_dt5Zi,
		:ora_ds_dt6:ora_ds_dt6Zi,
		:ora_ds_dt7:ora_ds_dt7Zi,
		:ora_ds_dt8:ora_ds_dt8Zi,
		:ora_ds_dt9:ora_ds_dt9Zi,
		:ora_ds_dt10:ora_ds_dt10Zi,
		:ora_ds_dt11:ora_ds_dt11Zi,
		:ora_ds_dt12:ora_ds_dt12Zi,
		:ora_ds_dt13:ora_ds_dt13Zi,
		:ora_ds_dt14:ora_ds_dt14Zi,
		:ora_ds_dt15:ora_ds_dt15Zi,
		:ora_ds_dt16:ora_ds_dt16Zi,
		:ora_ds_dt17:ora_ds_dt17Zi,
		:ora_ds_dt18:ora_ds_dt18Zi,
		:ora_ds_dt19:ora_ds_dt19Zi,
		:ora_ds_dt20:ora_ds_dt20Zi,
		TO_DATE( :ora_toc:ora_tocZi,'YYYYMMDDHH24MISS'),
		:ora_tom:ora_tomZi,
		:ora_mop:ora_mopZi
	);
	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//this methode tries to update a DB record,when the update fails.
char* EDROPC_DAT::storeDB()
{
	char* ret = NULL;
	setKeysFromRecord();
	ret=updateDB();
	if(ret != NULL)
	{
		ret=insertDB();
		if(ret != NULL)
		{
			dbAccess = false;
			return(ret);
		}
	}
	return(ret);
}

//deletes a single entry from DB
char* EDROPC_DAT::deleteDB()
{
//
//copy the host variables (k_...) to Oracle Host Keys (k_ora_..)
//
	copyKeyToHost();

//
// Do Delete 
//
	EXEC SQL DELETE FROM EDROPC_DAT
	WHERE
				hcoil           = :k_ora_hcoil AND 
				edtno           = :k_ora_edtno ;

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

// Executes the SQL DELETE with a where clause
char* EDROPC_DAT::deleteDB(const char* where,long* count)
{
	*(count) = -1L;
// Create dynamic statement.
//
	strcpy((char*)dynstr.arr,"DELETE");
	strcat((char*)dynstr.arr," FROM EDROPC_DAT");
	if ( where != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, where );
	}

	dynstr.len = strlen( (char*) dynstr.arr);
	EXEC SQL EXECUTE IMMEDIATE :dynstr;
	oracleSqlCode = sqlca.sqlcode;
		oracleRowsProcessed = sqlca.sqlerrd[2];
	if (sqlca.sqlcode == 0 )
		*(count) = sqlca.sqlerrd[2];
	else 

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//openSetDB data with where condition and sort order.
char* EDROPC_DAT::openSetDB(const char* where,char* order)
{
//
// Create dynamic statement.
//
	strcpy((char*)dynstr.arr,"SELECT ");
	strcat((char*)dynstr.arr,"hcoil,");
	strcat((char*)dynstr.arr,"edtno,");
	strcat((char*)dynstr.arr,"len,");
	strcat((char*)dynstr.arr,"mestim,");
	strcat((char*)dynstr.arr,"ws_dt1,");
	strcat((char*)dynstr.arr,"ws_dt2,");
	strcat((char*)dynstr.arr,"ws_dt3,");
	strcat((char*)dynstr.arr,"ws_dt4,");
	strcat((char*)dynstr.arr,"ws_dt5,");
	strcat((char*)dynstr.arr,"ws_dt6,");
	strcat((char*)dynstr.arr,"ws_dt7,");
	strcat((char*)dynstr.arr,"ws_dt8,");
	strcat((char*)dynstr.arr,"ws_dt9,");
	strcat((char*)dynstr.arr,"ws_dt10,");
	strcat((char*)dynstr.arr,"ws_dt11,");
	strcat((char*)dynstr.arr,"ws_dt12,");
	strcat((char*)dynstr.arr,"ws_dt13,");
	strcat((char*)dynstr.arr,"ws_dt14,");
	strcat((char*)dynstr.arr,"ws_dt15,");
	strcat((char*)dynstr.arr,"ws_dt16,");
	strcat((char*)dynstr.arr,"ws_dt17,");
	strcat((char*)dynstr.arr,"ws_dt18,");
	strcat((char*)dynstr.arr,"ws_dt19,");
	strcat((char*)dynstr.arr,"ws_dt20,");
	strcat((char*)dynstr.arr,"ds_dt1,");
	strcat((char*)dynstr.arr,"ds_dt2,");
	strcat((char*)dynstr.arr,"ds_dt3,");
	strcat((char*)dynstr.arr,"ds_dt4,");
	strcat((char*)dynstr.arr,"ds_dt5,");
	strcat((char*)dynstr.arr,"ds_dt6,");
	strcat((char*)dynstr.arr,"ds_dt7,");
	strcat((char*)dynstr.arr,"ds_dt8,");
	strcat((char*)dynstr.arr,"ds_dt9,");
	strcat((char*)dynstr.arr,"ds_dt10,");
	strcat((char*)dynstr.arr,"ds_dt11,");
	strcat((char*)dynstr.arr,"ds_dt12,");
	strcat((char*)dynstr.arr,"ds_dt13,");
	strcat((char*)dynstr.arr,"ds_dt14,");
	strcat((char*)dynstr.arr,"ds_dt15,");
	strcat((char*)dynstr.arr,"ds_dt16,");
	strcat((char*)dynstr.arr,"ds_dt17,");
	strcat((char*)dynstr.arr,"ds_dt18,");
	strcat((char*)dynstr.arr,"ds_dt19,");
	strcat((char*)dynstr.arr,"ds_dt20,");
	strcat((char*)dynstr.arr,"TO_CHAR(toc , 'YYYYMMDDHH24MISS'),");
	strcat((char*)dynstr.arr,"tom,");
	strcat((char*)dynstr.arr,"mop");

	strcat((char*)dynstr.arr," FROM EDROPC_DAT ");
	if ( where != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, where);
	}
	if ( order != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, order);
	}

	dynstr.len = strlen( (char*) dynstr.arr);
	EXEC SQL PREPARE set_EDROPC_DAT FROM :dynstr;
	if (sqlca.sqlcode == 0 )
	{
		EXEC SQL DECLARE cu_EDROPC_DAT CURSOR FOR set_EDROPC_DAT;
		if (sqlca.sqlcode == 0 )
			EXEC SQL OPEN cu_EDROPC_DAT;
	}

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	cuFl = OPENED;
	return ( NULL );
}

//Executes the SQL FETCH Statement .
char* EDROPC_DAT::getSetDB()
{
	if ( cuFl != OPENED ) return ("No open Cursor Table:Me");
	EXEC SQL FETCH cu_EDROPC_DAT INTO
		:ora_hcoil,
		:ora_edtno,
		:ora_len:ora_lenZi,
		:ora_mestim:ora_mestimZi,
		:ora_ws_dt1:ora_ws_dt1Zi,
		:ora_ws_dt2:ora_ws_dt2Zi,
		:ora_ws_dt3:ora_ws_dt3Zi,
		:ora_ws_dt4:ora_ws_dt4Zi,
		:ora_ws_dt5:ora_ws_dt5Zi,
		:ora_ws_dt6:ora_ws_dt6Zi,
		:ora_ws_dt7:ora_ws_dt7Zi,
		:ora_ws_dt8:ora_ws_dt8Zi,
		:ora_ws_dt9:ora_ws_dt9Zi,
		:ora_ws_dt10:ora_ws_dt10Zi,
		:ora_ws_dt11:ora_ws_dt11Zi,
		:ora_ws_dt12:ora_ws_dt12Zi,
		:ora_ws_dt13:ora_ws_dt13Zi,
		:ora_ws_dt14:ora_ws_dt14Zi,
		:ora_ws_dt15:ora_ws_dt15Zi,
		:ora_ws_dt16:ora_ws_dt16Zi,
		:ora_ws_dt17:ora_ws_dt17Zi,
		:ora_ws_dt18:ora_ws_dt18Zi,
		:ora_ws_dt19:ora_ws_dt19Zi,
		:ora_ws_dt20:ora_ws_dt20Zi,
		:ora_ds_dt1:ora_ds_dt1Zi,
		:ora_ds_dt2:ora_ds_dt2Zi,
		:ora_ds_dt3:ora_ds_dt3Zi,
		:ora_ds_dt4:ora_ds_dt4Zi,
		:ora_ds_dt5:ora_ds_dt5Zi,
		:ora_ds_dt6:ora_ds_dt6Zi,
		:ora_ds_dt7:ora_ds_dt7Zi,
		:ora_ds_dt8:ora_ds_dt8Zi,
		:ora_ds_dt9:ora_ds_dt9Zi,
		:ora_ds_dt10:ora_ds_dt10Zi,
		:ora_ds_dt11:ora_ds_dt11Zi,
		:ora_ds_dt12:ora_ds_dt12Zi,
		:ora_ds_dt13:ora_ds_dt13Zi,
		:ora_ds_dt14:ora_ds_dt14Zi,
		:ora_ds_dt15:ora_ds_dt15Zi,
		:ora_ds_dt16:ora_ds_dt16Zi,
		:ora_ds_dt17:ora_ds_dt17Zi,
		:ora_ds_dt18:ora_ds_dt18Zi,
		:ora_ds_dt19:ora_ds_dt19Zi,
		:ora_ds_dt20:ora_ds_dt20Zi,
		:ora_toc:ora_tocZi,
		:ora_tom:ora_tomZi,
		:ora_mop:ora_mopZi;

	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		pCatch->catchError(sqlca.sqlcode);
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		return (char*) sqlca.sqlerrm.sqlerrmc ;
	}
	//
	// copy host variables into Class attributes
	//
	copyOracleToAttribute();
	copyHostToKey();
	return ( NULL );
}

//Close a Oracle Cursor
char* EDROPC_DAT::closeSetDB()
{
	EXEC SQL CLOSE cu_EDROPC_DAT;
	oracleSqlCode = sqlca.sqlcode;         
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		pCatch->catchError(sqlca.sqlcode);
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		return (char*) sqlca.sqlerrm.sqlerrmc ;
	}
	cuFl = CLOSED;
	return ( NULL );
}

//Executes the SQL count(key) for a where clause
char* EDROPC_DAT::countDB(const char* where,long* count)
{
	*(count) = -1L;
//
// Create dynamic statement. 
//
	strncpy((char*)dynstr.arr,"SELECT count(hcoil)", sizeof(dynstr.arr));
	strcat((char*)dynstr.arr," FROM EDROPC_DAT");
	if ( where != (char*)NULL )
	{
		strcat( (char*)dynstr.arr," ");
		 strcat( (char*)dynstr.arr, where );
	}
	dynstr.len = strlen( (char*) dynstr.arr);
	EXEC SQL PREPARE c_EDROPC_DAT FROM :dynstr;
	
	if (sqlca.sqlcode == 0 )
	{
		EXEC SQL DECLARE ct_EDROPC_DAT CURSOR FOR c_EDROPC_DAT;
		if (sqlca.sqlcode == 0 )
		{
			EXEC SQL OPEN ct_EDROPC_DAT;
			if (sqlca.sqlcode == 0 )			{
				EXEC SQL FETCH ct_EDROPC_DAT INTO :rowCnt;
				if (sqlca.sqlcode == 0 )
				*(count) = rowCnt;
			}
			EXEC SQL CLOSE ct_EDROPC_DAT;
		}
	}

	//
	// ORACLE Error 
	//
	oracleSqlCode = sqlca.sqlcode;
	oracleRowsProcessed = sqlca.sqlerrd[2];
	if ( sqlca.sqlcode != 0 )
	{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		logOraMessageInfo();
		pCatch->catchError(sqlca.sqlcode);
		return (char*)sqlca.sqlerrm.sqlerrmc;
	}
	return ( NULL );
}

//private methode copy Attribute to Oracle
//copys Object attributes into Oracle Host variables.
void EDROPC_DAT::copyAttributeToOracle()
{
	char* ptrStr;
	ptrStr = this->hcoil();
	if( strlen(ptrStr)< sizeof(ora_hcoil.arr))
	{
		strncpy((char*)ora_hcoil.arr, ptrStr, sizeof(ora_hcoil.arr));
		ora_hcoil.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_hcoil.len = 0;
	ora_edtno = this->edtno();
	ora_len = this->len();
	ora_lenZi = this->lenZi();
	ptrStr = this->mestim();
	if( strlen(ptrStr)< sizeof(ora_mestim.arr))
	{
		strncpy((char*)ora_mestim.arr, ptrStr, sizeof(ora_mestim.arr));
		ora_mestim.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_mestim.len = 0;
	ora_mestimZi = this->mestimZi();
	ora_ws_dt1 = this->ws_dt1();
	ora_ws_dt1Zi = this->ws_dt1Zi();
	ora_ws_dt2 = this->ws_dt2();
	ora_ws_dt2Zi = this->ws_dt2Zi();
	ora_ws_dt3 = this->ws_dt3();
	ora_ws_dt3Zi = this->ws_dt3Zi();
	ora_ws_dt4 = this->ws_dt4();
	ora_ws_dt4Zi = this->ws_dt4Zi();
	ora_ws_dt5 = this->ws_dt5();
	ora_ws_dt5Zi = this->ws_dt5Zi();
	ora_ws_dt6 = this->ws_dt6();
	ora_ws_dt6Zi = this->ws_dt6Zi();
	ora_ws_dt7 = this->ws_dt7();
	ora_ws_dt7Zi = this->ws_dt7Zi();
	ora_ws_dt8 = this->ws_dt8();
	ora_ws_dt8Zi = this->ws_dt8Zi();
	ora_ws_dt9 = this->ws_dt9();
	ora_ws_dt9Zi = this->ws_dt9Zi();
	ora_ws_dt10 = this->ws_dt10();
	ora_ws_dt10Zi = this->ws_dt10Zi();
	ora_ws_dt11 = this->ws_dt11();
	ora_ws_dt11Zi = this->ws_dt11Zi();
	ora_ws_dt12 = this->ws_dt12();
	ora_ws_dt12Zi = this->ws_dt12Zi();
	ora_ws_dt13 = this->ws_dt13();
	ora_ws_dt13Zi = this->ws_dt13Zi();
	ora_ws_dt14 = this->ws_dt14();
	ora_ws_dt14Zi = this->ws_dt14Zi();
	ora_ws_dt15 = this->ws_dt15();
	ora_ws_dt15Zi = this->ws_dt15Zi();
	ora_ws_dt16 = this->ws_dt16();
	ora_ws_dt16Zi = this->ws_dt16Zi();
	ora_ws_dt17 = this->ws_dt17();
	ora_ws_dt17Zi = this->ws_dt17Zi();
	ora_ws_dt18 = this->ws_dt18();
	ora_ws_dt18Zi = this->ws_dt18Zi();
	ora_ws_dt19 = this->ws_dt19();
	ora_ws_dt19Zi = this->ws_dt19Zi();
	ora_ws_dt20 = this->ws_dt20();
	ora_ws_dt20Zi = this->ws_dt20Zi();
	ora_ds_dt1 = this->ds_dt1();
	ora_ds_dt1Zi = this->ds_dt1Zi();
	ora_ds_dt2 = this->ds_dt2();
	ora_ds_dt2Zi = this->ds_dt2Zi();
	ora_ds_dt3 = this->ds_dt3();
	ora_ds_dt3Zi = this->ds_dt3Zi();
	ora_ds_dt4 = this->ds_dt4();
	ora_ds_dt4Zi = this->ds_dt4Zi();
	ora_ds_dt5 = this->ds_dt5();
	ora_ds_dt5Zi = this->ds_dt5Zi();
	ora_ds_dt6 = this->ds_dt6();
	ora_ds_dt6Zi = this->ds_dt6Zi();
	ora_ds_dt7 = this->ds_dt7();
	ora_ds_dt7Zi = this->ds_dt7Zi();
	ora_ds_dt8 = this->ds_dt8();
	ora_ds_dt8Zi = this->ds_dt8Zi();
	ora_ds_dt9 = this->ds_dt9();
	ora_ds_dt9Zi = this->ds_dt9Zi();
	ora_ds_dt10 = this->ds_dt10();
	ora_ds_dt10Zi = this->ds_dt10Zi();
	ora_ds_dt11 = this->ds_dt11();
	ora_ds_dt11Zi = this->ds_dt11Zi();
	ora_ds_dt12 = this->ds_dt12();
	ora_ds_dt12Zi = this->ds_dt12Zi();
	ora_ds_dt13 = this->ds_dt13();
	ora_ds_dt13Zi = this->ds_dt13Zi();
	ora_ds_dt14 = this->ds_dt14();
	ora_ds_dt14Zi = this->ds_dt14Zi();
	ora_ds_dt15 = this->ds_dt15();
	ora_ds_dt15Zi = this->ds_dt15Zi();
	ora_ds_dt16 = this->ds_dt16();
	ora_ds_dt16Zi = this->ds_dt16Zi();
	ora_ds_dt17 = this->ds_dt17();
	ora_ds_dt17Zi = this->ds_dt17Zi();
	ora_ds_dt18 = this->ds_dt18();
	ora_ds_dt18Zi = this->ds_dt18Zi();
	ora_ds_dt19 = this->ds_dt19();
	ora_ds_dt19Zi = this->ds_dt19Zi();
	ora_ds_dt20 = this->ds_dt20();
	ora_ds_dt20Zi = this->ds_dt20Zi();
	ptrStr = this->toc();
	if( strlen(ptrStr)< sizeof(ora_toc.arr))
	{
		strncpy((char*)ora_toc.arr, ptrStr, sizeof(ora_toc.arr));
		ora_toc.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_toc.len = 0;
	ora_tocZi = this->tocZi();
	ptrStr = this->tom();
	if( strlen(ptrStr)< sizeof(ora_tom.arr))
	{
		strncpy((char*)ora_tom.arr, ptrStr, sizeof(ora_tom.arr));
		ora_tom.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_tom.len = 0;
	ora_tomZi = this->tomZi();
	ptrStr = this->mop();
	if( strlen(ptrStr)< sizeof(ora_mop.arr))
	{
		strncpy((char*)ora_mop.arr, ptrStr, sizeof(ora_mop.arr));
		ora_mop.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		ora_mop.len = 0;
	ora_mopZi = this->mopZi();
}

//private methode copy Oracle to Attribute
//copys Oracle Host variables into Object attributes.
void EDROPC_DAT::copyOracleToAttribute()
{
	ora_hcoil.arr[ora_hcoil.len] = '\0';
	this->set_hcoil((char*) ora_hcoil.arr);
	this->set_edtno((short)ora_edtno);
	this->set_len((short)ora_len);
	this->set_lenZi((short)ora_lenZi);
	ora_mestim.arr[ora_mestim.len] = '\0';
	this->set_mestim((char*) ora_mestim.arr);
	this->set_mestimZi((short)ora_mestimZi);
	this->set_ws_dt1((short)ora_ws_dt1);
	this->set_ws_dt1Zi((short)ora_ws_dt1Zi);
	this->set_ws_dt2((short)ora_ws_dt2);
	this->set_ws_dt2Zi((short)ora_ws_dt2Zi);
	this->set_ws_dt3((short)ora_ws_dt3);
	this->set_ws_dt3Zi((short)ora_ws_dt3Zi);
	this->set_ws_dt4((short)ora_ws_dt4);
	this->set_ws_dt4Zi((short)ora_ws_dt4Zi);
	this->set_ws_dt5((short)ora_ws_dt5);
	this->set_ws_dt5Zi((short)ora_ws_dt5Zi);
	this->set_ws_dt6((short)ora_ws_dt6);
	this->set_ws_dt6Zi((short)ora_ws_dt6Zi);
	this->set_ws_dt7((short)ora_ws_dt7);
	this->set_ws_dt7Zi((short)ora_ws_dt7Zi);
	this->set_ws_dt8((short)ora_ws_dt8);
	this->set_ws_dt8Zi((short)ora_ws_dt8Zi);
	this->set_ws_dt9((short)ora_ws_dt9);
	this->set_ws_dt9Zi((short)ora_ws_dt9Zi);
	this->set_ws_dt10((short)ora_ws_dt10);
	this->set_ws_dt10Zi((short)ora_ws_dt10Zi);
	this->set_ws_dt11((short)ora_ws_dt11);
	this->set_ws_dt11Zi((short)ora_ws_dt11Zi);
	this->set_ws_dt12((short)ora_ws_dt12);
	this->set_ws_dt12Zi((short)ora_ws_dt12Zi);
	this->set_ws_dt13((short)ora_ws_dt13);
	this->set_ws_dt13Zi((short)ora_ws_dt13Zi);
	this->set_ws_dt14((short)ora_ws_dt14);
	this->set_ws_dt14Zi((short)ora_ws_dt14Zi);
	this->set_ws_dt15((short)ora_ws_dt15);
	this->set_ws_dt15Zi((short)ora_ws_dt15Zi);
	this->set_ws_dt16((short)ora_ws_dt16);
	this->set_ws_dt16Zi((short)ora_ws_dt16Zi);
	this->set_ws_dt17((short)ora_ws_dt17);
	this->set_ws_dt17Zi((short)ora_ws_dt17Zi);
	this->set_ws_dt18((short)ora_ws_dt18);
	this->set_ws_dt18Zi((short)ora_ws_dt18Zi);
	this->set_ws_dt19((short)ora_ws_dt19);
	this->set_ws_dt19Zi((short)ora_ws_dt19Zi);
	this->set_ws_dt20((short)ora_ws_dt20);
	this->set_ws_dt20Zi((short)ora_ws_dt20Zi);
	this->set_ds_dt1((short)ora_ds_dt1);
	this->set_ds_dt1Zi((short)ora_ds_dt1Zi);
	this->set_ds_dt2((short)ora_ds_dt2);
	this->set_ds_dt2Zi((short)ora_ds_dt2Zi);
	this->set_ds_dt3((short)ora_ds_dt3);
	this->set_ds_dt3Zi((short)ora_ds_dt3Zi);
	this->set_ds_dt4((short)ora_ds_dt4);
	this->set_ds_dt4Zi((short)ora_ds_dt4Zi);
	this->set_ds_dt5((short)ora_ds_dt5);
	this->set_ds_dt5Zi((short)ora_ds_dt5Zi);
	this->set_ds_dt6((short)ora_ds_dt6);
	this->set_ds_dt6Zi((short)ora_ds_dt6Zi);
	this->set_ds_dt7((short)ora_ds_dt7);
	this->set_ds_dt7Zi((short)ora_ds_dt7Zi);
	this->set_ds_dt8((short)ora_ds_dt8);
	this->set_ds_dt8Zi((short)ora_ds_dt8Zi);
	this->set_ds_dt9((short)ora_ds_dt9);
	this->set_ds_dt9Zi((short)ora_ds_dt9Zi);
	this->set_ds_dt10((short)ora_ds_dt10);
	this->set_ds_dt10Zi((short)ora_ds_dt10Zi);
	this->set_ds_dt11((short)ora_ds_dt11);
	this->set_ds_dt11Zi((short)ora_ds_dt11Zi);
	this->set_ds_dt12((short)ora_ds_dt12);
	this->set_ds_dt12Zi((short)ora_ds_dt12Zi);
	this->set_ds_dt13((short)ora_ds_dt13);
	this->set_ds_dt13Zi((short)ora_ds_dt13Zi);
	this->set_ds_dt14((short)ora_ds_dt14);
	this->set_ds_dt14Zi((short)ora_ds_dt14Zi);
	this->set_ds_dt15((short)ora_ds_dt15);
	this->set_ds_dt15Zi((short)ora_ds_dt15Zi);
	this->set_ds_dt16((short)ora_ds_dt16);
	this->set_ds_dt16Zi((short)ora_ds_dt16Zi);
	this->set_ds_dt17((short)ora_ds_dt17);
	this->set_ds_dt17Zi((short)ora_ds_dt17Zi);
	this->set_ds_dt18((short)ora_ds_dt18);
	this->set_ds_dt18Zi((short)ora_ds_dt18Zi);
	this->set_ds_dt19((short)ora_ds_dt19);
	this->set_ds_dt19Zi((short)ora_ds_dt19Zi);
	this->set_ds_dt20((short)ora_ds_dt20);
	this->set_ds_dt20Zi((short)ora_ds_dt20Zi);
	ora_toc.arr[ora_toc.len] = '\0';
	this->set_toc((char*) ora_toc.arr);
	this->set_tocZi((short)ora_tocZi);
	ora_tom.arr[ora_tom.len] = '\0';
	this->set_tom((char*) ora_tom.arr);
	this->set_tomZi((short)ora_tomZi);
	ora_mop.arr[ora_mop.len] = '\0';
	this->set_mop((char*) ora_mop.arr);
	this->set_mopZi((short)ora_mopZi);
}

//private methode copy Key to host
//copys Object attributes into Oralce Key variables.
void EDROPC_DAT::copyKeyToHost()
{
	char* ptrStr;
	ptrStr = this->k_hcoil();
	if( strlen(ptrStr)< sizeof(k_ora_hcoil.arr))
	{
		strncpy((char*)k_ora_hcoil.arr, ptrStr, sizeof(k_ora_hcoil.arr));
		k_ora_hcoil.len = strlen (ptrStr);
	}
	else
	// set length to zero.
		k_ora_hcoil.len = 0;
	k_ora_edtno = this->k_edtno();
}

//private methode copy Host to Key
// copys Oracle Host Key variables into Object Key attributes.
void EDROPC_DAT::copyHostToKey()
{
	ora_hcoil.arr[ora_hcoil.len] = '\0';
	this->set_k_hcoil((char*) ora_hcoil.arr);
	this->set_k_edtno((short)ora_edtno);
}

//private methode log Oracle message information
void EDROPC_DAT::logOraMessageInfo()
{
	LOG d("EDROPC_DAT::logOraMessageInfo()");
	sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
	oraca.orastxt.orastxtc[oraca.orastxt.orastxtl] = '\0';
	oraca.orasfnm.orasfnmc[oraca.orasfnm.orasfnml] = '\0';
	
	//* negating a error code submitted perhaps positively.
	if (sqlca.sqlcode > 0) sqlca.sqlcode *= -1;
	
	//* Distribute fault text, SQL statement and file in the Debug System.
	d << "ORA-Error: "<< sqlca.sqlerrm.sqlerrmc; d.Info();
	d << "OracaText: "<< oraca.orastxt.orastxtc; d.Info();
	d << "in line " << oraca.oraslnr << " in file " << oraca.orasfnm.orasfnmc; d.Info();
}

//this methode stores the unique key attributes
void EDROPC_DAT::setPrimKey(char* arg1,short arg2)
{
	strncpy( (char*)c_k_hcoil, arg1, sizeof(c_k_hcoil));
	c_k_hcoil[sizeof(c_k_hcoil)-1] = '\0';
	s_k_edtno = arg2;
}

//this methode stores the unique key attributes
void EDROPC_DAT::initInsertKeys(char* arg1,short arg2)
{
	setPrimKey(arg1,arg2);
	strncpy( (char*)c_hcoil, arg1, sizeof(c_hcoil));
	c_hcoil[sizeof(c_hcoil)-1] = '\0';
	s_edtno = arg2;
}

//this methode set the unique key attributes from the DB Record Attributes
void EDROPC_DAT::setKeysFromRecord()
{
	set_k_hcoil( hcoil() );
	set_k_edtno( edtno() );
}

//			         
//O P E R A T O R  + 
//===================
//                   
EDROPC_DAT EDROPC_DAT::operator+(const EDROPC_DAT &inst) const
{
	EDROPC_DAT ptrEDROPC_DAT(*this);
//----------------------------------------------------------
	ptrEDROPC_DAT.set_hcoil(inst.hcoil());
//----------------------------------------------------------
	ptrEDROPC_DAT.set_edtno(inst.edtno());
//----------------------------------------------------------
	if(inst.lenZi() != -1)
	{
		ptrEDROPC_DAT.set_len(inst.len());
		ptrEDROPC_DAT.set_lenZi(inst.lenZi());
	}
//----------------------------------------------------------
	if(inst.mestimZi() != -1)
	{
		ptrEDROPC_DAT.set_mestim(inst.mestim());
		ptrEDROPC_DAT.set_mestimZi(inst.mestimZi());
	}
//----------------------------------------------------------
	if(inst.ws_dt1Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt1(inst.ws_dt1());
		ptrEDROPC_DAT.set_ws_dt1Zi(inst.ws_dt1Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt2Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt2(inst.ws_dt2());
		ptrEDROPC_DAT.set_ws_dt2Zi(inst.ws_dt2Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt3Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt3(inst.ws_dt3());
		ptrEDROPC_DAT.set_ws_dt3Zi(inst.ws_dt3Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt4Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt4(inst.ws_dt4());
		ptrEDROPC_DAT.set_ws_dt4Zi(inst.ws_dt4Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt5Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt5(inst.ws_dt5());
		ptrEDROPC_DAT.set_ws_dt5Zi(inst.ws_dt5Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt6Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt6(inst.ws_dt6());
		ptrEDROPC_DAT.set_ws_dt6Zi(inst.ws_dt6Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt7Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt7(inst.ws_dt7());
		ptrEDROPC_DAT.set_ws_dt7Zi(inst.ws_dt7Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt8Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt8(inst.ws_dt8());
		ptrEDROPC_DAT.set_ws_dt8Zi(inst.ws_dt8Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt9Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt9(inst.ws_dt9());
		ptrEDROPC_DAT.set_ws_dt9Zi(inst.ws_dt9Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt10Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt10(inst.ws_dt10());
		ptrEDROPC_DAT.set_ws_dt10Zi(inst.ws_dt10Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt11Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt11(inst.ws_dt11());
		ptrEDROPC_DAT.set_ws_dt11Zi(inst.ws_dt11Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt12Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt12(inst.ws_dt12());
		ptrEDROPC_DAT.set_ws_dt12Zi(inst.ws_dt12Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt13Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt13(inst.ws_dt13());
		ptrEDROPC_DAT.set_ws_dt13Zi(inst.ws_dt13Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt14Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt14(inst.ws_dt14());
		ptrEDROPC_DAT.set_ws_dt14Zi(inst.ws_dt14Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt15Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt15(inst.ws_dt15());
		ptrEDROPC_DAT.set_ws_dt15Zi(inst.ws_dt15Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt16Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt16(inst.ws_dt16());
		ptrEDROPC_DAT.set_ws_dt16Zi(inst.ws_dt16Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt17Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt17(inst.ws_dt17());
		ptrEDROPC_DAT.set_ws_dt17Zi(inst.ws_dt17Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt18Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt18(inst.ws_dt18());
		ptrEDROPC_DAT.set_ws_dt18Zi(inst.ws_dt18Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt19Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt19(inst.ws_dt19());
		ptrEDROPC_DAT.set_ws_dt19Zi(inst.ws_dt19Zi());
	}
//----------------------------------------------------------
	if(inst.ws_dt20Zi() != -1)
	{
		ptrEDROPC_DAT.set_ws_dt20(inst.ws_dt20());
		ptrEDROPC_DAT.set_ws_dt20Zi(inst.ws_dt20Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt1Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt1(inst.ds_dt1());
		ptrEDROPC_DAT.set_ds_dt1Zi(inst.ds_dt1Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt2Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt2(inst.ds_dt2());
		ptrEDROPC_DAT.set_ds_dt2Zi(inst.ds_dt2Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt3Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt3(inst.ds_dt3());
		ptrEDROPC_DAT.set_ds_dt3Zi(inst.ds_dt3Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt4Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt4(inst.ds_dt4());
		ptrEDROPC_DAT.set_ds_dt4Zi(inst.ds_dt4Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt5Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt5(inst.ds_dt5());
		ptrEDROPC_DAT.set_ds_dt5Zi(inst.ds_dt5Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt6Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt6(inst.ds_dt6());
		ptrEDROPC_DAT.set_ds_dt6Zi(inst.ds_dt6Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt7Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt7(inst.ds_dt7());
		ptrEDROPC_DAT.set_ds_dt7Zi(inst.ds_dt7Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt8Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt8(inst.ds_dt8());
		ptrEDROPC_DAT.set_ds_dt8Zi(inst.ds_dt8Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt9Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt9(inst.ds_dt9());
		ptrEDROPC_DAT.set_ds_dt9Zi(inst.ds_dt9Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt10Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt10(inst.ds_dt10());
		ptrEDROPC_DAT.set_ds_dt10Zi(inst.ds_dt10Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt11Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt11(inst.ds_dt11());
		ptrEDROPC_DAT.set_ds_dt11Zi(inst.ds_dt11Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt12Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt12(inst.ds_dt12());
		ptrEDROPC_DAT.set_ds_dt12Zi(inst.ds_dt12Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt13Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt13(inst.ds_dt13());
		ptrEDROPC_DAT.set_ds_dt13Zi(inst.ds_dt13Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt14Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt14(inst.ds_dt14());
		ptrEDROPC_DAT.set_ds_dt14Zi(inst.ds_dt14Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt15Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt15(inst.ds_dt15());
		ptrEDROPC_DAT.set_ds_dt15Zi(inst.ds_dt15Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt16Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt16(inst.ds_dt16());
		ptrEDROPC_DAT.set_ds_dt16Zi(inst.ds_dt16Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt17Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt17(inst.ds_dt17());
		ptrEDROPC_DAT.set_ds_dt17Zi(inst.ds_dt17Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt18Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt18(inst.ds_dt18());
		ptrEDROPC_DAT.set_ds_dt18Zi(inst.ds_dt18Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt19Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt19(inst.ds_dt19());
		ptrEDROPC_DAT.set_ds_dt19Zi(inst.ds_dt19Zi());
	}
//----------------------------------------------------------
	if(inst.ds_dt20Zi() != -1)
	{
		ptrEDROPC_DAT.set_ds_dt20(inst.ds_dt20());
		ptrEDROPC_DAT.set_ds_dt20Zi(inst.ds_dt20Zi());
	}
//----------------------------------------------------------
	if(inst.tocZi() != -1)
	{
		ptrEDROPC_DAT.set_toc(inst.toc());
		ptrEDROPC_DAT.set_tocZi(inst.tocZi());
	}
//----------------------------------------------------------
	if(inst.tomZi() != -1)
	{
		ptrEDROPC_DAT.set_tom(inst.tom());
		ptrEDROPC_DAT.set_tomZi(inst.tomZi());
	}
//----------------------------------------------------------
	if(inst.mopZi() != -1)
	{
		ptrEDROPC_DAT.set_mop(inst.mop());
		ptrEDROPC_DAT.set_mopZi(inst.mopZi());
	}
	return( ptrEDROPC_DAT );
}

//			         
//O P E R A T O R  = 
//===================
//                   
const EDROPC_DAT& EDROPC_DAT::operator=(const EDROPC_DAT &inst)
{
//----------------------------------------------------------
	this->set_hcoil(inst.hcoil());
//----------------------------------------------------------
	this->set_edtno(inst.edtno());
//----------------------------------------------------------
	this->set_len(inst.len());
	this->set_lenZi(inst.lenZi());
//----------------------------------------------------------
	this->set_mestim(inst.mestim());
	this->set_mestimZi(inst.mestimZi());
//----------------------------------------------------------
	this->set_ws_dt1(inst.ws_dt1());
	this->set_ws_dt1Zi(inst.ws_dt1Zi());
//----------------------------------------------------------
	this->set_ws_dt2(inst.ws_dt2());
	this->set_ws_dt2Zi(inst.ws_dt2Zi());
//----------------------------------------------------------
	this->set_ws_dt3(inst.ws_dt3());
	this->set_ws_dt3Zi(inst.ws_dt3Zi());
//----------------------------------------------------------
	this->set_ws_dt4(inst.ws_dt4());
	this->set_ws_dt4Zi(inst.ws_dt4Zi());
//----------------------------------------------------------
	this->set_ws_dt5(inst.ws_dt5());
	this->set_ws_dt5Zi(inst.ws_dt5Zi());
//----------------------------------------------------------
	this->set_ws_dt6(inst.ws_dt6());
	this->set_ws_dt6Zi(inst.ws_dt6Zi());
//----------------------------------------------------------
	this->set_ws_dt7(inst.ws_dt7());
	this->set_ws_dt7Zi(inst.ws_dt7Zi());
//----------------------------------------------------------
	this->set_ws_dt8(inst.ws_dt8());
	this->set_ws_dt8Zi(inst.ws_dt8Zi());
//----------------------------------------------------------
	this->set_ws_dt9(inst.ws_dt9());
	this->set_ws_dt9Zi(inst.ws_dt9Zi());
//----------------------------------------------------------
	this->set_ws_dt10(inst.ws_dt10());
	this->set_ws_dt10Zi(inst.ws_dt10Zi());
//----------------------------------------------------------
	this->set_ws_dt11(inst.ws_dt11());
	this->set_ws_dt11Zi(inst.ws_dt11Zi());
//----------------------------------------------------------
	this->set_ws_dt12(inst.ws_dt12());
	this->set_ws_dt12Zi(inst.ws_dt12Zi());
//----------------------------------------------------------
	this->set_ws_dt13(inst.ws_dt13());
	this->set_ws_dt13Zi(inst.ws_dt13Zi());
//----------------------------------------------------------
	this->set_ws_dt14(inst.ws_dt14());
	this->set_ws_dt14Zi(inst.ws_dt14Zi());
//----------------------------------------------------------
	this->set_ws_dt15(inst.ws_dt15());
	this->set_ws_dt15Zi(inst.ws_dt15Zi());
//----------------------------------------------------------
	this->set_ws_dt16(inst.ws_dt16());
	this->set_ws_dt16Zi(inst.ws_dt16Zi());
//----------------------------------------------------------
	this->set_ws_dt17(inst.ws_dt17());
	this->set_ws_dt17Zi(inst.ws_dt17Zi());
//----------------------------------------------------------
	this->set_ws_dt18(inst.ws_dt18());
	this->set_ws_dt18Zi(inst.ws_dt18Zi());
//----------------------------------------------------------
	this->set_ws_dt19(inst.ws_dt19());
	this->set_ws_dt19Zi(inst.ws_dt19Zi());
//----------------------------------------------------------
	this->set_ws_dt20(inst.ws_dt20());
	this->set_ws_dt20Zi(inst.ws_dt20Zi());
//----------------------------------------------------------
	this->set_ds_dt1(inst.ds_dt1());
	this->set_ds_dt1Zi(inst.ds_dt1Zi());
//----------------------------------------------------------
	this->set_ds_dt2(inst.ds_dt2());
	this->set_ds_dt2Zi(inst.ds_dt2Zi());
//----------------------------------------------------------
	this->set_ds_dt3(inst.ds_dt3());
	this->set_ds_dt3Zi(inst.ds_dt3Zi());
//----------------------------------------------------------
	this->set_ds_dt4(inst.ds_dt4());
	this->set_ds_dt4Zi(inst.ds_dt4Zi());
//----------------------------------------------------------
	this->set_ds_dt5(inst.ds_dt5());
	this->set_ds_dt5Zi(inst.ds_dt5Zi());
//----------------------------------------------------------
	this->set_ds_dt6(inst.ds_dt6());
	this->set_ds_dt6Zi(inst.ds_dt6Zi());
//----------------------------------------------------------
	this->set_ds_dt7(inst.ds_dt7());
	this->set_ds_dt7Zi(inst.ds_dt7Zi());
//----------------------------------------------------------
	this->set_ds_dt8(inst.ds_dt8());
	this->set_ds_dt8Zi(inst.ds_dt8Zi());
//----------------------------------------------------------
	this->set_ds_dt9(inst.ds_dt9());
	this->set_ds_dt9Zi(inst.ds_dt9Zi());
//----------------------------------------------------------
	this->set_ds_dt10(inst.ds_dt10());
	this->set_ds_dt10Zi(inst.ds_dt10Zi());
//----------------------------------------------------------
	this->set_ds_dt11(inst.ds_dt11());
	this->set_ds_dt11Zi(inst.ds_dt11Zi());
//----------------------------------------------------------
	this->set_ds_dt12(inst.ds_dt12());
	this->set_ds_dt12Zi(inst.ds_dt12Zi());
//----------------------------------------------------------
	this->set_ds_dt13(inst.ds_dt13());
	this->set_ds_dt13Zi(inst.ds_dt13Zi());
//----------------------------------------------------------
	this->set_ds_dt14(inst.ds_dt14());
	this->set_ds_dt14Zi(inst.ds_dt14Zi());
//----------------------------------------------------------
	this->set_ds_dt15(inst.ds_dt15());
	this->set_ds_dt15Zi(inst.ds_dt15Zi());
//----------------------------------------------------------
	this->set_ds_dt16(inst.ds_dt16());
	this->set_ds_dt16Zi(inst.ds_dt16Zi());
//----------------------------------------------------------
	this->set_ds_dt17(inst.ds_dt17());
	this->set_ds_dt17Zi(inst.ds_dt17Zi());
//----------------------------------------------------------
	this->set_ds_dt18(inst.ds_dt18());
	this->set_ds_dt18Zi(inst.ds_dt18Zi());
//----------------------------------------------------------
	this->set_ds_dt19(inst.ds_dt19());
	this->set_ds_dt19Zi(inst.ds_dt19Zi());
//----------------------------------------------------------
	this->set_ds_dt20(inst.ds_dt20());
	this->set_ds_dt20Zi(inst.ds_dt20Zi());
//----------------------------------------------------------
	this->set_toc(inst.toc());
	this->set_tocZi(inst.tocZi());
//----------------------------------------------------------
	this->set_tom(inst.tom());
	this->set_tomZi(inst.tomZi());
//----------------------------------------------------------
	this->set_mop(inst.mop());
	this->set_mopZi(inst.mopZi());
	return(*this);
}

